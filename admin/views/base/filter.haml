-# coding: utf-8
#conflict_filter.noselect
  .col-sm-3{:style=>"padding:0"}
    #accordion.panel-group{:role=>'tablist','aria-multiselectable'=>'true'}
      .panel.panel-default
        -@filterform.each do |page,content|
          .panel-heading{:role=>"tab",:id=>"h_#{page}"}
            %h5.panel-title
              %a.collapsed{"data-toggle"=>"collapse","data-parent"=>"#accordion","href"=>"#c_#{page}","aria-expanded"=>(page=="basic_data" ? "true" : "false"),"aria-controls"=>"c_#{page}"}
                =t "v.filter.#{page.slug '_'}"
          .panel-collapse.collapse{:id=>"c_#{page}",:class=>(page=="basic_data" ? "in" : ""),:role=>"tabpanel","aria-labelledby"=>"h_#{page}"}
            .panel-body
              %ul
                -content.each do |field,options|
                  %li
                    %a.show-filter-content{"data-id"=>"#{field}",:style=>(field=="success_level" ? "color:#000;font-weight:bold" : "")}= t "v.filter.#{field.slug '_'}"
  .col-sm-9.canvas
    .row
      .col-sm-4
        .relative.options
          -@filterform.each do |page,content|
            -content.each do |field,options|
              .data{:id=>field,:style=>(field=="success_level" ? "display:block" : "")}
                -if options.has_key? 'name' then  name = options['name'] else name = field end
                -if options.has_key? 'model' then  model = options['model'] else model = field end
                -if options['content'].is_a? Array
                  .body
                    %h4= t "v.filter.#{field.shorten_en}"
                    %ul
                      -options['content'].each do |c|
                        %li
                          -if field == "region"
                            %span.drag.graybg{"data-section"=>"field","data-name"=>name,"data-field"=>field,"data-field-local"=>t("v.filter.#{field.shorten_en}"),"data-field"=>field,"data-value"=>c.keys.first}= t "countries.region.#{c.values.first.shorten_en}"
                          -else
                            %span.drag.graybg{"data-section"=>"field","data-name"=>name,"data-field"=>field,"data-field-local"=>t("v.filter.#{field.shorten_en}"),"data-field"=>field,"data-value"=>c.keys.first}= t "m.#{name.slug('_')}.#{c.values.first.slug('_').split("_")[0..7].join("_")}"
                -elsif options['content'] == 'auto'
                  .body.auto
                    %h4= "#{t "v.filter.#{field.shorten_en}"}"
                    %input.fautocomplete{:id=>field,:type=>'text','data-source'=>model,"data-name"=>name,"data-field"=>field,"data-field-local"=>t("v.filter.#{field.shorten_en}"),"data-section"=>"field",:style=>'width:100%'}
                    %ul
                -elsif options['content'] == 'flat'
                  .body.flat
                    %h4= "#{t "v.filter.#{field.shorten_en}"}"
                    .row
                      .col-xs-9
                        %input.token{:id=>"#{field}-input",:type=>'text',:style=>'width:100%'}
                      .col-xs-3
                        .btn.btn-default.create{:id=>"#{field}-create",:type=>'text',:style=>'width:32px;height:26px;padding:3px;margin-left:-24px;',"data-name"=>name,"data-field"=>field,"data-field-local"=>t("v.filter.#{field.shorten_en}"),"data-section"=>"prefix"}
                          %icon.glyphicon{:class=>"glyphicon-arrow-#{$dir == "ltr" ? "right":"left"}"}
                    %ul
                -elsif options['name'].match(/(_datestamp|_sum)$/)
                  -range = options['content'].split('-')
                  %h4= "#{t "v.filter.#{field.shorten_en}"}"
                  .slider{:id=>"#{field}-slider"}
                  .clearfix{:style=>'width:100%'}
                    -if name == 'investment_sum'
                      %input.gte{:type=>'text',:id=>"#{field}-gte",:value=>range[0]}
                      %input.lte{:type=>'text',:id=>"#{field}-lte",:value=>range[1]}
                    -else
                      %input.gte{:type=>'number',:id=>"#{field}-gte",:value=>range[0]}
                      %input.lte{:type=>'number',:id=>"#{field}-lte",:value=>range[1]}
                  %ul
                    %li
                      %span.drag.graybg{:id=>"#{field}-drag","data-section"=>"field","data-name"=>name,"data-field"=>field,"data-field-local"=>t("v.filter.#{field.shorten_en}"),"data-value"=>"#{range[0]}-#{range[1]}"}
                        %strong= "#{t "v.filter.#{field.shorten_en}"}:"
                        ="#{range[0]} - #{range[1]}"
                  -if name == 'investment_sum'
                    :javascript
                      function exp(base,roof) {
                        div = 1
                        if (roof % 2 == 1) {div = 2}
                        return Math.pow(base,Math.ceil(roof/2))/div
                      }
                      function unexp(exp) {
                        res = (String(exp).length-1)*2;
                        if (String(exp).substr(0,1) == 5) res ++;
                        return res
                      }
                      function commify(nStr) {
                        nStr += '';
                        if (nStr.length < 5) return nStr
                        x = nStr.split('.');
                        x1 = x[0];
                        x2 = x.length > 1 ? '.' + x[1] : '';
                        var rgx = /(\d+)(\d{3})/;
                        while (rgx.test(x1)) {
                          x1 = x1.replace(rgx, '$1' + ',' + '$2');
                        }
                        return x1 + x2;
                      }
                      $(document).ready(function(){
                        $(".options .gte, .options .lte").keydown(function (e) {
                          if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110]) !== -1 ||
                            (e.keyCode == 65 && e.ctrlKey === true) || 
                            (e.keyCode >= 35 && e.keyCode <= 39)) {
                            return;
                          }
                          if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 48 ) && (e.keyCode < 96 || e.keyCode > 105 ))) {
                            e.preventDefault();
                            if (e.keyCode == 49) {$(this).val("1"+$(this).val().substr(1,12))}
                            if (e.keyCode == 53) {$(this).val("5"+$(this).val().substr(1,12))}
                          }
                        });
                        $("##{field}-slider").slider({
                          range: true,
                          min: #{range[0]},
                          max: #{range[1]},
                          values: [#{range[0]}, #{range[1]}],
                          slide: function( event, ui ) {
                            gte = commify(exp(10,ui.values[0]))
                            lte = commify(exp(10,ui.values[1]))
                            range = [gte,lte]
                            $(".options ##{field}-gte").val(range[0]);
                            $(".options ##{field}-lte").val(range[1]);
                            $(".options ##{field}-drag").attr('data-value',range[ 0 ]+":"+range[ 1 ]);
                            $(".options ##{field}-drag").html("<strong>#{t "v.filter.#{field.shorten_en}"}:</strong> "+range[ 0 ]+" - "+range[ 1 ]);
                          }
                        });
                        $(".options ##{field}-gte, .options ##{field}-lte").on('change',function(e){
                          range = [unexp($(".options ##{field}-gte").val()),unexp($(".options ##{field}-lte").val())]
                          comms = [commify($(".options ##{field}-gte").val()),commify($(".options ##{field}-lte").val())]
                          $("##{field}-slider").slider({values:range})
                          $(".options ##{field}-drag").attr('data-value',comms[0]+":"+comms[1]);
                          $(".options ##{field}-drag").html("<strong>#{t "v.filter.#{field.shorten_en}"}:</strong> "+comms[0]+" - "+comms[1]);
                        });
                      });

                  -else
                    :javascript
                      $(document).ready(function(){
                        $("##{field}-slider").slider({
                          range: true,
                          min: #{range[0]},
                          max: #{range[1]},
                          values: [#{range[0]}, #{range[1]}],
                          slide: function( event, ui ) {
                            $(".options ##{field}-gte").val(ui.values[0]);
                            $(".options ##{field}-lte").val(ui.values[1]);
                            $(".options ##{field}-drag").attr('data-value',ui.values[ 0 ]+"-"+ui.values[ 1 ]);
                            $(".options ##{field}-drag").html("<strong>#{t "v.filter.#{field.shorten_en}"}:</strong> "+ui.values[ 0 ]+" - "+ui.values[ 1 ]);
                          }
                        });
                        $(".options ##{field}-gte, .options ##{field}-lte").on('change',function(e){
                          range = [$(".options ##{field}-gte").val(),$(".options ##{field}-lte").val()]
                          $("##{field}-slider").slider({values:range})
                          $(".options ##{field}-drag").attr('data-value',range[0]+":"+range[1]);
                          $(".options ##{field}-drag").html("<strong>#{t "v.filter.#{field.shorten_en}"}:</strong> "+range[0]+" - "+range[1]);
                        });
                      });

      .col-sm-8{:style=>"padding:0"}
        .head
          -if @page_type == "graph"
            %span.count &nbsp;
          .ready
            -unless @filter
              .btn.btn-default{:onclick=>"sendFilter(serializeFilter('#{@page_type}'),'#{@page_type}');"}= t "v.filter.apply"
            .btn.btn-default{:onclick=>'clearFilter()'}= t "v.filter.clear"
            -if current_account and @page_type != "feat"
              .btn.btn-default{:onclick=>"saveFilter(serializeFilter('#{@page_type}'))"}= t "v.filter.save"
            -if @page_type == "graph"
              .btn.btn-default{'data-toggle'=>'modal','data-target'=>'#gc'} Network Graph
            -#
              .btn.btn-default{:onclick=>'saveFilter()'} Save
              -if current_account
                .btn.btn-default{:onclick=>'embedFilter()'} Embed
        .body
          -if @page_type == "graph"
            .root.dropbox.or{"data-section"=>"box","data-value"=>'or',:style=>"margin-top:28px;"}
              %icon.glyphicon.glyphicon-chevron-down.op
          -else
            .root.dropbox.or{"data-section"=>"box","data-value"=>'or'}
              %icon.glyphicon.glyphicon-chevron-down.op

          #filterInfo{:style=>'margin-top:8px;'}
            %p.small{:style=>'line-height:16px;padding:4px;'}= t "v.filter.please_pick_from_fields_above"
            %ul
              %li{:style=>'color:white;font-weight:bold;text-align:center;'}
                %div.idrag
                  .dropbox.and{"data-section"=>"box","data-value"=>'and'}=t "v.filter.and"
                %div.idrag
                  .dropbox.or{"data-section"=>"box","data-value"=>'or'}=t "v.filter.or"
                %div.idrag
                  .dropbox.not{"data-section"=>"box","data-value"=>'not'}=t "v.filter.not"


-content_for :body_end do
  %script{:src=>"/javascripts/filter.js",:type=>"text/javascript"}
  :javascript
    $(document).ready(function(){
      onFilterLoad();
    });
    function onFilterLoad() {
      if (typeof createContainer === 'function' && typeof $().sortable() === 'object') {
        var sortHash = {
          hoverClass: 'drop-hover',
          connectWith: ".dropbox",
          placeholder: "placeholder",
          containment: ".root.dropbox",
          forceHelperSize: true,
          start: function (e, t) {
            if (t.item.prop('tagName') == "DIV") { helper = t.helper.find('div'); } 
            else if (t.item.prop('tagName') == "SPAN") { helper = t.item.clone()}
            $(t.placeholder).css('background',helper.css('background'));
          },
          stop: function (e, t) {
            $(t.item).replaceWith(createContainer(t.item));
            $(".dropbox").sortable(sortHash).disableSelection();
            $.each($('.canvas .dropbox'), function(i,it) {
              $(it).prepend($(it).children('icon.glyphicon.op'));
            });
          }
        }

        $('.show-filter-content').on('click',function (e) {
          $('.show-filter-content').css('font-weight','normal');
          $('.show-filter-content').css('color','#0380A5');
          $(this).css('font-weight','bold');
          $(this).css('color','black');
          id = $(this).attr('data-id');
          $('#conflict_filter .options .data').hide();
          $("#"+id).show();
        })

        $('.drag, .idrag').draggable({
          connectToSortable: ".root.dropbox",
          placeholder: "placeholder",
          revert: "invalid",
          helper: "clone",
          containment: ".canvas",
        }).disableSelection();

        $('.dropbox').sortable(sortHash).disableSelection();

        $(".root.dropbox").on("mouseenter", "icon.glyphicon.op", function(e) { 
          div = $('<div class="drop"></div>');
          p = $(this).parent()
          $.each(['and','or','not'],function(i,el){
            if (!p.hasClass(el)) {div.append($('<div class="'+el+'">&nbsp;</div>'));}
          });
          if (!p.hasClass('root')) {div.append($('<icon class="glyphicon glyphicon-remove"></icon>'));}
          $(this).append(div);
        });

        $(".root.dropbox").on("mouseleave", "icon.glyphicon.op", function(e) { $(this).find('div').detach(); });
        
        $(".root.dropbox").on("click", "icon.op icon.glyphicon-remove", function(e) { $(this).parent().parent().parent().parent().detach() });
        
        $(".root.dropbox").on("click", "icon.op .drop .and", function(e) { p = $(this).parent().parent().parent(); p.removeClass('and or not'); p.addClass('and'); p.attr('data-value','and'); });
        $(".root.dropbox").on("click", "icon.op .drop .or", function(e) { p = $(this).parent().parent().parent(); p.removeClass('and or not'); p.addClass('or'); p.attr('data-value','or'); });
        $(".root.dropbox").on("click", "icon.op .drop .not", function(e) { p = $(this).parent().parent().parent(); p.removeClass('and or not'); p.addClass('not'); p.attr('data-value','not'); });
        $(".root.dropbox").on("click", "icon.ag", function(e) { $(this).parent().detach() });

        $('.options').on('click','.flat .create',function (e) {
          me = $(e.target).closest('col-xs-3').find('.create');
          me = $(this);
          flocal = me.attr('data-field-local');
          field = me.attr('data-field');
          name = me.attr('data-name');
          row = me.closest('.row');
          that = row.find('input');
          thatval = that.val()//.replace(/[^\w\d\s]/g,"")
          text = thatval.substr(0,1).toUpperCase() + thatval.substr(1);
          drag = $('<li><span title="'+toTitleCase('name'.replace(/_/g,' '))+': '+text+'"data-value="'+text+'" data-field="'+field+'" data-field-local="'+flocal+'" data-name="'+name+'" data-section="prefix" class="drag graybg" ><strong style="font-size:12px;">'+flocal+':</strong> '+(text)+'</span></li>');
          //console.log(drag.html())
          row.nextAll('ul').append(drag);

          $('.drag, .idrag').draggable({
            connectToSortable: ".root.dropbox",
            placeholder: "placeholder",
            revert: "invalid",
            helper: "clone",
            containment: ".canvas",
          }).disableSelection();
        });

        (function( $ ) {
          $.ui.autocomplete.prototype.options.autoSelect = true;
          $( "body" ).on( "blur", ".fautocomplete", function( event ) {
            var autocomplete = $( this ).data()['uiAutocomplete'] || $( this ).data()['ui-autocomplete'];
            if ( !autocomplete.options.autoSelect || autocomplete.selectedItem ) { return; }
            var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" );
            autocomplete.widget().children( ".ui-menu-item" ).each(function() {
              var item = $( this )
              if ( matcher.test( item.value || item ) ) {
                autocomplete.selectedItem = item;
                return false;
              } else {
                $('.fautocomplete').val('');
                return false
              }
            });
            if ( autocomplete.selectedItem ) {
              autocomplete._trigger( "select", event, { item: autocomplete.selectedItem } );
            }
          });

        }( jQuery ));
        $( ".fautocomplete" ).autocomplete({
          minLength: 3,
          position: { my : "left top", at: "left bottom" },
          source: function( request, response ) {
            $source = "/ac_json/"+$(".fautocomplete:focus").attr("data-source");
            $.ajax({
              type: "GET",
              url: $source+'?token='+request.term,
              success: function(data){ response( JSON.parse(data) ); }
            })
          },
          select: function( event, ui ) {
            $item = $('.fautocomplete:focus');
            $item.val( "" );
            $id = $item.attr('id');
            $ul = $item.nextAll('ul')
            $html = "<span class='drag graybg' data-value='"+ui.item.value+"' data-section='"+$item.attr('data-section')+"' data-name='"+$item.attr('data-name')+"' data-field='"+$item.attr('data-field')+"' data-field-local='"+$item.attr('data-field-local')+"'>"+ui.item.label+"</span>"
            $($ul).append($('<li>', {html: $html}));
            $('.drag, .idrag').draggable({
              connectToSortable: ".root.dropbox",
              placeholder: "placeholder",
              revert: "invalid",
              helper: "clone",
              containment: ".canvas",
            }).disableSelection();

            return false;
          }
        });

      } else {
        setTimeout(onFilterLoad,10);
      }
    }

    var createContainer = function (that) {
      //console.log(that.prop('tagName'));
      if (that.prop('tagName')=='SPAN') {
        $(that).find('strong').detach()
        text = $(that).text();
        dfl = toTitleCase($(that).attr('data-field-local').replace(/_/g,' '));
        return $('<span title="'+dfl+': '+$(that).text()+'"data-value="'+$(that).attr('data-value')+'" data-field="'+$(that).attr('data-field')+'" data-name="'+$(that).attr('data-name')+'" data-section="'+$(that).attr('data-section')+'" data-field-local="'+$(that).attr('data-field-local')+'" class="drag graybg" ><icon class="glyphicon glyphicon-remove ag"></icon><strong style="font-size:12px;">'+dfl+':</strong> '+(text)+'</span>');
      } else if ($(that).prop('tagName')=='DIV') {
        if ($(that).attr('class').split(' ').indexOf('idrag') >= 0) {
          that = $(that).find('div')
          return $('<div><div data-value="'+that.attr('data-value')+'" data-section="box" class="dropbox '+that.attr('data-value')+'"><icon class="glyphicon glyphicon-chevron-down op"></icon></div></div>');
        } else {
          return $(that).clone()
        }
      }
    };

    function clearFilter(){
      $query = "{}";
      $('.root.dropbox *').not('icon').detach();
      if (typeof map != 'undefined') {
        $('.map_icon').show();
        map.fitBounds(markerLayer.getBounds());
      }
      //$('#head p strong').text("#{t 'v.index.var_cases_reported',num_cases:'data_length'}".replace("data_length",$('.map_icon').length))
      sendFilter(serializeFilter('#{@page_type}'),'#{@page_type}');
    };



    function serializeFilter(page_type){
      function sdive(el,ro){
        $.each(el.find("> span"),function(i,e){
          e = $(e);
          key = e.attr('data-name');
          if (key.match(/_(datestamp|sum)$/)) {
            val = e.attr('data-value').toLowerCase().replace(/^\s+/,'').replace(/\s+$/,'').replace("-",":");
          } else {
            val = e.attr('data-value').toLowerCase().replace(/^\s+/,'').replace(/\s+$/,'');
          }
          if (e.attr('data-section') == 'prefix' && val.split(/\s/).length > 1) {
            terms = ""
            $.each(val.split(/\s/),function(i,e){
              terms += "<term><"+key+">"+e+"</"+key+"></term>";
            })
            $('<must>'+terms+'</must>').appendTo($('<bool></bool>').appendTo(ro));
          } else {
            $('<'+key+'>'+val+'</'+key+'>').appendTo($('<term></term>').appendTo(ro));
          }
        })
        $.each(el.find("> div"),function(i,e){
          e = $(e).find('> div');
          if (e.find('> div, > span').length == 0) return true
          filter = {"or":"should","and":"must","not":"must_not"}[e.attr("data-value")]
          sdive(e,$('<'+filter+'></'+filter+'>').appendTo($('<bool></bool>').appendTo(ro)));
        })
      }
      var root = $('<query><bool></bool></query>')
      log = {"or":"should","and":"must","not":"must_not"}[$('.root.dropbox').attr('data-value')]
      sdive($('.root.dropbox'),$('<'+log+'></'+log+'>').appendTo($(root).find("bool")));
      //if (root.html() == "<bool><should></should></bool>") {root.html("<bool><should><match_all>{}</match_all></should></bool>")};
      query = JSON.stringify($.xml2json(root.html()));
      if (query.match(/{"(should|must|must_not)":""}/)) query = '{"should":{"match_all":{}}}';
      fields = [];
      $("input.field:checked").each(function(i,e){ fields.push($(e).val())})
      data = 'filter='+query.replace('{\"match_all\":\"{}\"}}','{\"match_all\":{}}}')+"&page_type="+page_type+"&fields="+fields.join(",")+"&limit="+$("input.limit").val();
      if (page_type == "network") {
        data += "&name="+$(".nname").val()+"&subtitle="+$(".nsubtitle").val()+"&desc="+$(".ndesc").val();
      } 
      return {data:data,query:query}
    }

    function saveFilter(data){
      $.ajax({
        type: "POST",
        url: "/savefilter",
        data: {data: data.query},
        success: function(uid){
          alert(window.location.origin+"/embed_filter/"+uid)
        }
      })
    }
    function sendFilter(data,page_type) {
      $query = data.data.split("&")[0].substr(7);
      $.ajax({
        type: "POST",
        url: "/filter",
        data: data.data,
        success: function(data){
          data = JSON.parse(data);
          //$('#head p strong').text(data.length+" case"+(data.length < 2 ? "" : "s")+" filtered")
          if (data.length == 0) {
            $('#head p strong').text("#{t 'v.filter.no_cases_found'}")
          } else if (data.length == 1) {
            $('#head p strong').text("#{t 'v.filter.one_case_filtered'}")
          } else {
            $('#head p strong').text("#{t 'v.filter.var_cases_filtered',num_cases:'data_length'}".replace("data_length",data.length))
          }
          if (page_type == 'feat') {
            filterFollowed(data);
            $('#featured_filter').val(query);
            $('#filter-modal').modal('hide');
            $('#filter-info').text("Featuring "+data.length+" cases.")
          } else if (page_type == 'network' || page_type == 'graph') {
            //console.log(data)

            count = data._count;
            names = data._names;

            delete data._count;
            delete data._names;

            if (page_type=="network") {
              $("iframe.gc").attr("src",params["url"]+"/embed?auto=true&show=Graph")
              $("iframe.gc").slideDown();
            } else {
              $(".count").text(" "+count+" cases filtered.")
              updateGraph(data)
            }
          } else {
            filterMarkers(data);
            $('.recent tr').remove();
            scrolling = true;
            ask();
          }
        }
      })
    }
    function toTitleCase(str) {
      return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
    }

    function makeid(length,arr) {
      var result           = '';
      var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      var charactersLength = characters.length;
      for ( var i = 0; i < length; i++ ) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
      }
      return result;
    }

    function random_id(l,a) {
      r = makeid(l, a);
      while (a.indexOf(r) >= 0) {
        r = makeid(l, a);
      }
      return r
    }

    function dive(obj, level, hash) {
      $.each(obj,function(k,v){
        lvl = level.slice();
        if (["must","should","must_not"].indexOf(k) >= 0) {
          val = {"must":"and","should":"or","must_not":"not"}[k];
          rid = random_id(3,lvl)
          if (lvl.length == 0) {
            elem = $("#filter .body .root");
            elem.attr("id", rid);
            elem.attr("data-value", val);
            elem.removeClass("and or not").addClass(val);
          } else {
            elem = $("#filter .body #"+lvl.join(" #"));
            elem.append("<div><div id='"+rid+"' data-value='"+val+"' data-section='box' class='dropbox "+val+" ui-sortable'><icon class='glyphicon glyphicon-chevron-down op ui-sortable-handle'></icon></div></div>")
          }
          lvl.push(rid)
        }
        sp = ""
        $.each(lvl, function(i,e) { sp += "  "})
        //console.log(sp+"K: "+k+", L: ["+lvl.join(", ")+"], T: "+(typeof v))
        if (typeof v == "object") {
          dive(v, lvl, hash) 
        } else if ($("#filter .data ul li span[data-name="+k+"][data-value="+v+"]").length > 0){
          orig = $("#filter .data ul li span[data-name="+k+"][data-value="+v+"]")
          span = '<span title="'+orig.data('field-local')+': '+orig.text()+'" data-value="'+orig.data('value')+'" data-field="'+orig.data('field')+'" data-name="'+orig.data('name')+'" data-section="field" data-field-local="'+orig.data('field-local')+'" class="drag graybg"><icon class="glyphicon glyphicon-remove ag"></icon><strong style="font-size:12px;">'+orig.data('field-local')+':</strong> '+orig.text()+'</span>'
          elem = $("#filter .body #"+lvl.join(" #"));
          elem.append(span)
        } else if (["country_id","companies","supporters","country_of_company"].indexOf(k) >= 0) {
          elem = $("#filter .body #"+lvl.join(" #"));
          orig = $("#filter .data input[data-name="+k+"]")
          span = '<span title="'+orig.data('field-local')+': '+hash[k][v]+'" data-value="'+v+'" data-field="'+orig.data('field')+'" data-name="'+orig.data('name')+'" data-section="field" data-field-local="'+orig.data('field-local')+'" class="drag graybg"><icon class="glyphicon glyphicon-remove ag"></icon><strong style="font-size:12px;">'+orig.data('field-local')+':</strong> '+hash[k][v]+'</span>'
          elem.append(span)
        } else if (k.match(/_datestamp$/)) {
          v = v.replace(":","-")
          val = v.replace("-"," - ")
          elem = $("#filter .body #"+lvl.join(" #"));
          orig = $("#filter .data span[data-name="+k+"]")
          span = '<span title="'+orig.data('field-local')+': '+val+'" data-value="'+v+'" data-field="'+orig.data('field')+'" data-name="'+orig.data('name')+'" data-section="field" data-field-local="'+orig.data('field-local')+'" class="drag graybg"><icon class="glyphicon glyphicon-remove ag"></icon><strong style="font-size:12px;">'+orig.data('field-local')+':</strong> '+val+'</span>'
          elem.append(span)
        } else {
          elem = $("#filter .body #"+lvl.join(" #"));
          t = $("#filter .panel-body ul li a[data-id="+k+"]").text();
          span = '<span title="'+t+':  '+v+'" data-value="'+v+'" data-field="'+k+'" data-name="'+k+'" data-section="prefix" data-field-local="'+orig.data('field-local')+'" class="drag graybg"><icon class="glyphicon glyphicon-remove ag"></icon><strong style="font-size:12px;">'+t+':</strong>  '+v+'</span>'
          elem.append(span)
        }
      })
    }

