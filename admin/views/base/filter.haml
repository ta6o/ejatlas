-# coding: utf-8
#conflict_filter.noselect
  .col-sm-3{:style=>"padding:0"}
    #accordion.panel-group{:role=>'tablist','aria-multiselectable'=>'true'}
      .panel.panel-default
        -@filterform.each do |page,content|
          .panel-heading{:role=>"tab",:id=>"h_#{page}"}
            %h5.panel-title
              %a.collapsed{"data-toggle"=>"collapse","data-parent"=>"#accordion","href"=>"#c_#{page}","aria-expanded"=>(page=="basic_data" ? "true" : "false"),"aria-controls"=>"c_#{page}"}
                =page.gsub("_"," ").titlecase
          .panel-collapse.collapse{:id=>"c_#{page}",:class=>(page=="basic_data" ? "in" : ""),:role=>"tabpanel","aria-labelledby"=>"h_#{page}"}
            .panel-body
              %ul
                -content.each do |field,options|
                  %li
                    %a.show-filter-content{"data-id"=>"#{field}",:style=>(field=="success_level" ? "color:#000;font-weight:bold" : "")}= field.gsub("_"," ").titlecase
    #filterInfo{:style=>'margin-top:8px;'}
      %p.small{:style=>'line-height:16px;padding:4px;'}
        Please pick from the
        %strong fields
        above and drag the 
        %strong options
        to the panel on the right. You can use the
        %strong logical boxes
        below to create complex filters.
      %ul
        %li{:style=>'color:white;font-weight:bold;text-align:center;'}
          %div.idrag
            .dropbox.and{"data-section"=>"box","data-value"=>'and'} AND
          %div.idrag
            .dropbox.or{"data-section"=>"box","data-value"=>'or'} OR
          %div.idrag
            .dropbox.not{"data-section"=>"box","data-value"=>'not'} NOT

  .col-sm-9.canvas
    .row
      .col-sm-4
        .relative.options
          -@filterform.each do |page,content|
            -content.each do |field,options|
              .data{:id=>field,:style=>(field=="success_level" ? "display:block" : "")}
                -if options.has_key? 'name' then  name = options['name'] else name = field end
                -if options.has_key? 'model' then  model = options['model'] else model = field end
                -if options['content'].is_a? Array
                  .body
                    %h4= field.gsub("_"," ").titlecase
                    %ul
                      -options['content'].each do |c|
                        %li
                          %span.drag.graybg{"data-section"=>"field","data-name"=>name,"data-field"=>field,"data-value"=>c.keys.first}=c.values.first
                -elsif options['content'] == 'auto'
                  .body.auto
                    %h4= field.gsub("_"," ").titlecase
                    %input.autocomplete{:id=>field,:type=>'text','data-source'=>model,"data-name"=>name,"data-field"=>field,"data-section"=>"field",:style=>'width:100%'}
                    %ul
                -elsif options['content'] == 'flat'
                  .body.flat
                    %h4= field.gsub("_"," ").titlecase
                    .row
                      .col-xs-9
                        %input.token{:id=>"#{field}-input",:type=>'text',:style=>'width:100%'}
                      .col-xs-3
                        .btn.btn-default.create{:id=>"#{field}-create",:type=>'text',:style=>'width:32px;height:26px;padding:3px;margin-left:-24px;',"data-name"=>name,"data-field"=>field,"data-section"=>"prefix"}
                          %icon.glyphicon.glyphicon-arrow-right
                    %ul
                -elsif options['content'].match(/\d+:\d+/)
                  -range = options['content'].split(':')
                  %h4= field.gsub("_"," ").titlecase
                  .slider{:id=>"#{field}-slider"}
                  .clearfix{:style=>'width:100%'}
                    -if name == 'investment_sum'
                      %input.gte{:type=>'text',:id=>"#{field}-gte",:value=>range[0]}
                      %input.lte{:type=>'text',:id=>"#{field}-lte",:value=>range[1]}
                    -else
                      %input.gte{:type=>'number',:id=>"#{field}-gte",:value=>range[0]}
                      %input.lte{:type=>'number',:id=>"#{field}-lte",:value=>range[1]}
                  %ul
                    %li
                      %span.drag.graybg{:id=>"#{field}-drag","data-section"=>"field","data-name"=>name,"data-field"=>field,"data-value"=>"#{range[0]}:#{range[1]}"}
                        %strong= "#{field.gsub("_"," ").titlecase}:"
                        ="#{range[0]} - #{range[1]}"
                  -if name == 'investment_sum'
                    :javascript
                      function exp(base,roof) {
                        div = 1
                        if (roof % 2 == 1) {div = 2}
                        return Math.pow(base,Math.ceil(roof/2))/div
                      }
                      function unexp(exp) {
                        res = (String(exp).length-1)*2;
                        if (String(exp).substr(0,1) == 5) res ++;
                        return res
                      }
                      function commify(nStr) {
                        nStr += '';
                        if (nStr.length < 5) return nStr
                        x = nStr.split('.');
                        x1 = x[0];
                        x2 = x.length > 1 ? '.' + x[1] : '';
                        var rgx = /(\d+)(\d{3})/;
                        while (rgx.test(x1)) {
                          x1 = x1.replace(rgx, '$1' + ',' + '$2');
                        }
                        return x1 + x2;
                      }
                      $(document).ready(function(){
                        $(".options .gte, .options .lte").keydown(function (e) {
                          if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110]) !== -1 ||
                            (e.keyCode == 65 && e.ctrlKey === true) || 
                            (e.keyCode >= 35 && e.keyCode <= 39)) {
                            return;
                          }
                          if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 48 ) && (e.keyCode < 96 || e.keyCode > 105 ))) {
                            e.preventDefault();
                            if (e.keyCode == 49) {$(this).val("1"+$(this).val().substr(1,12))}
                            if (e.keyCode == 53) {$(this).val("5"+$(this).val().substr(1,12))}
                          }
                        });
                        $("##{field}-slider").slider({
                          range: true,
                          min: #{range[0]},
                          max: #{range[1]},
                          values: [#{range[0]}, #{range[1]}],
                          slide: function( event, ui ) {
                            gte = commify(exp(10,ui.values[0]))
                            lte = commify(exp(10,ui.values[1]))
                            range = [gte,lte]
                            $(".options ##{field}-gte").val(range[0]);
                            $(".options ##{field}-lte").val(range[1]);
                            $(".options ##{field}-drag").attr('data-value',range[ 0 ]+":"+range[ 1 ]);
                            $(".options ##{field}-drag").html("<strong>#{field.gsub("_"," ").titlecase}:</strong> "+range[ 0 ]+" - "+range[ 1 ]);
                          }
                        });
                        $(".options ##{field}-gte, .options ##{field}-lte").on('change',function(e){
                          range = [unexp($(".options ##{field}-gte").val()),unexp($(".options ##{field}-lte").val())]
                          comms = [commify($(".options ##{field}-gte").val()),commify($(".options ##{field}-lte").val())]
                          $("##{field}-slider").slider({values:range})
                          $(".options ##{field}-drag").attr('data-value',comms[0]+":"+comms[1]);
                          $(".options ##{field}-drag").html("<strong>#{field.gsub("_"," ").titlecase}:</strong> "+comms[0]+" - "+comms[1]);
                        });
                      });

                  -else
                    :javascript
                      $(document).ready(function(){
                        $("##{field}-slider").slider({
                          range: true,
                          min: #{range[0]},
                          max: #{range[1]},
                          values: [#{range[0]}, #{range[1]}],
                          slide: function( event, ui ) {
                            $(".options ##{field}-gte").val(ui.values[0]);
                            $(".options ##{field}-lte").val(ui.values[1]);
                            $(".options ##{field}-drag").attr('data-value',ui.values[ 0 ]+":"+ui.values[ 1 ]);
                            $(".options ##{field}-drag").html("<strong>#{field.gsub("_"," ").titlecase}:</strong> "+ui.values[ 0 ]+" - "+ui.values[ 1 ]);
                          }
                        });
                        $(".options ##{field}-gte, .options ##{field}-lte").on('change',function(e){
                          range = [$(".options ##{field}-gte").val(),$(".options ##{field}-lte").val()]
                          $("##{field}-slider").slider({values:range})
                          $(".options ##{field}-drag").attr('data-value',range[0]+":"+range[1]);
                          $(".options ##{field}-drag").html("<strong>#{field.gsub("_"," ").titlecase}:</strong> "+range[0]+" - "+range[1]);
                        });
                      });

      .col-sm-8{:style=>"padding:0"}
        .head
          .ready
            -if @contained
              .btn.btn-default{:onclick=>'serializeFilter("feat")'} Apply
            -else
              .btn.btn-default{:onclick=>'serializeFilter("")'} Apply
            .btn.btn-default{:onclick=>'clearFilter()'} Clear
            .btn.btn-default{:onclick=>'saveFilter()'} Save
        .body
          .root.dropbox.and{"data-section"=>"box","data-value"=>'and'}
            %icon.glyphicon.glyphicon-chevron-down.op


:javascript
  window.onload = onFilterLoad;
  function onFilterLoad() {
    if (typeof createContainer === 'function' && typeof $().sortable() === 'object') {
      var sortHash = {
        hoverClass: 'drop-hover',
        connectWith: ".dropbox",
        placeholder: "placeholder",
        containment: ".root.dropbox",
        forceHelperSize: true,
        start: function (e, t) {
          if (t.item.prop('tagName') == "DIV") { helper = t.helper.find('div'); } 
          else if (t.item.prop('tagName') == "SPAN") { helper = t.item.clone()}
          $(t.placeholder).css('background',helper.css('background'));
        },
        stop: function (e, t) {
          $(t.item).replaceWith(createContainer(t.item));
          $(".dropbox").sortable(sortHash).disableSelection();
          $.each($('.canvas .dropbox'), function(i,it) {
            $(it).prepend($(it).children('icon.glyphicon.op'));
          });
        }
      }

      $('.show-filter-content').on('click',function (e) {
        $('.show-filter-content').css('font-weight','normal');
        $('.show-filter-content').css('color','#0380A5');
        $(this).css('font-weight','bold');
        $(this).css('color','black');
        id = $(this).attr('data-id');
        $('#conflict_filter .options .data').hide();
        $("#"+id).show();
      })

      $('.drag, .idrag').draggable({
        connectToSortable: ".root.dropbox",
        placeholder: "placeholder",
        revert: "invalid",
        helper: "clone",
        containment: ".canvas",
      }).disableSelection();

      $('.dropbox').sortable(sortHash).disableSelection();

      $(".root.dropbox").on("mouseenter", "icon.glyphicon.op", function(e) { 
        div = $('<div class="drop"></div>');
        p = $(this).parent()
        $.each(['and','or','not'],function(i,el){
          if (!p.hasClass(el)) {div.append($('<div class="'+el+'">&nbsp;</div>'));}
        });
        if (!p.hasClass('root')) {div.append($('<icon class="glyphicon glyphicon-remove"></icon>'));}
        $(this).append(div);
      });

      $(".root.dropbox").on("mouseleave", "icon.glyphicon.op", function(e) { $(this).find('div').detach(); });
      
      $(".root.dropbox").on("click", "icon.op icon.glyphicon-remove", function(e) { $(this).parent().parent().parent().parent().detach() });
      
      $(".root.dropbox").on("click", "icon.op .drop .and", function(e) { p = $(this).parent().parent().parent(); p.removeClass('and or not'); p.addClass('and'); p.attr('data-value','and'); });
      $(".root.dropbox").on("click", "icon.op .drop .or", function(e) { p = $(this).parent().parent().parent(); p.removeClass('and or not'); p.addClass('or'); p.attr('data-value','or'); });
      $(".root.dropbox").on("click", "icon.op .drop .not", function(e) { p = $(this).parent().parent().parent(); p.removeClass('and or not'); p.addClass('not'); p.attr('data-value','not'); });
      $(".root.dropbox").on("click", "icon.ag", function(e) { $(this).parent().detach() });

      $('.options').on('click','.flat .create',function (e) {
        me = $(e.target).closest('col-xs-3').find('.create');
        me = $(this);
        field = me.attr('data-field');
        name = me.attr('data-name');
        row = me.closest('.row');
        that = row.find('input');
        text = that.val().substr(0,1).toUpperCase() + that.val().substr(1);
        drag = $('<li><span title="'+toTitleCase('name'.replace(/_/g,' '))+': '+text+'"data-value="'+text+'" data-field="'+field+'" data-name="'+name+'" data-section="prefix" class="drag graybg" ><strong style="font-size:12px;">'+toTitleCase('name'.replace(/_/g,' '))+':</strong> '+(text)+'</span></li>');
        console.log(drag.html())
        row.nextAll('ul').append(drag);

        $('.drag, .idrag').draggable({
          connectToSortable: ".root.dropbox",
          placeholder: "placeholder",
          revert: "invalid",
          helper: "clone",
          containment: ".canvas",
        }).disableSelection();
      });

      (function( $ ) {
        $.ui.autocomplete.prototype.options.autoSelect = true;
        $( "body" ).on( "blur", ".autocomplete", function( event ) {
          var autocomplete = $( this ).data()['uiAutocomplete'] || $( this ).data()['ui-autocomplete'];
          if ( !autocomplete.options.autoSelect || autocomplete.selectedItem ) { return; }
          var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" );
          autocomplete.widget().children( ".ui-menu-item" ).each(function() {
            var item = $( this )
            if ( matcher.test( item.value || item ) ) {
              autocomplete.selectedItem = item;
              return false;
            } else {
              $('.autocomplete').val('');
              return false
            }
          });
          if ( autocomplete.selectedItem ) {
            autocomplete._trigger( "select", event, { item: autocomplete.selectedItem } );
          }
        });

      }( jQuery ));
      $( ".autocomplete" ).autocomplete({
        minLength: 3,
        position: { my : "left top", at: "left bottom" },
        source: function( request, response ) {
          $source = "/ac_json/"+$(".autocomplete:focus").attr("data-source");
          $.ajax({
            type: "GET",
            url: $source+'?token='+request.term,
            success: function(data){ response( JSON.parse(data) ); }
          })
        },
        select: function( event, ui ) {
          $item = $('.autocomplete:focus');
          $item.val( "" );
          $id = $item.attr('id');
          $ul = $item.nextAll('ul')
          $html = "<span class='drag graybg' data-value='"+ui.item.value+"' data-section='"+$item.attr('data-section')+"' data-name='"+$item.attr('data-name')+"' data-field='"+$item.attr('data-field')+"'>"+ui.item.label+"</span>"
          $($ul).append($('<li>', {html: $html}));
          $('.drag, .idrag').draggable({
            connectToSortable: ".root.dropbox",
            placeholder: "placeholder",
            revert: "invalid",
            helper: "clone",
            containment: ".canvas",
          }).disableSelection();

          return false;
        }
      });

    } else {
      setTimeout(onFilterLoad,10);
    }
  }

  var createContainer = function (that) {
    console.log(that.prop('tagName'));
    if (that.prop('tagName')=='SPAN') {
      $(that).find('strong').detach()
      text = $(that).text();
      return $('<span title="'+toTitleCase($(that).attr('data-field').replace(/_/g,' '))+': '+$(that).text()+'"data-value="'+$(that).attr('data-value')+'" data-field="'+$(that).attr('data-field')+'" data-name="'+$(that).attr('data-name')+'" data-section="'+$(that).attr('data-section')+'" class="drag graybg" ><icon class="glyphicon glyphicon-remove ag"></icon><strong style="font-size:12px;">'+toTitleCase($(that).attr('data-field').replace(/_/g,' '))+':</strong> '+(text)+'</span>');
    } else if ($(that).prop('tagName')=='DIV') {
      if ($(that).attr('class').split(' ').indexOf('idrag') >= 0) {
        that = $(that).find('div')
        return $('<div><div data-value="'+that.attr('data-value')+'" data-section="box" class="dropbox '+that.attr('data-value')+'"><icon class="glyphicon glyphicon-chevron-down op"></icon></div></div>');
      } else {
        return $(that).clone()
      }
    }
  };

  function clearFilter(){
    $('.root.dropbox *').not('icon').detach();
  };

  function serializeFilter(page_type){
    function dive(el,ro){
      $.each(el.children().not('icon'),function(i,e){
        e = $(e);
        if (e.prop('tagName')=="SPAN") {
          key = e.attr('data-name');
          val = e.attr('data-value').toLowerCase().replace(/^\s+/,'').replace(/\s+$/,'');
          if (e.attr('data-section') == 'prefix' && val.split(/\s/).length > 1) {
            terms = ""
            $.each(val.split(/\s/),function(i,e){
              terms += "<term><"+key+">"+e+"</"+key+"></term>";
            })
            $('<must>'+terms+'</must>').appendTo($('<bool></bool>').appendTo(ro));
          } else {
            $('<'+key+'>'+val+'</'+key+'>').appendTo($('<term></term>').appendTo(ro));
          }
        } else if (e.prop('tagName')=="DIV") {
          e = $(e.find('div'))
          if (e.find('div, span').length == 0) return true
          filter = {"or":"should","and":"must","not":"must_not"}[e.attr("data-value")]
          dive(e,$('<'+filter+'></'+filter+'>').appendTo($('<bool></bool>').appendTo(ro)));
        } else {
          console.log (e)
        }
      });
    }
    var root = $('<query><filtered><filter><bool><must><bool></bool><term><approval_status>approved</approval_status></term></must></bool></filter></filtered></query>')
    log = {"or":"should","and":"must","not":"must_not"}[$('.root.dropbox').attr('data-value')]
    dive($('.root.dropbox'),$('<'+log+'></'+log+'>').appendTo($(root).find('bool must bool')));
    query = JSON.stringify($.xml2json(root.html()));
    url = "/filter"
    $.ajax({
      type: "POST",
      url: url,
      data: 'filter='+query+"&"+page_type,
      success: function(data){
        data = JSON.parse(data);
        if (page_type == 'feat') {
          filterFollowed(data);
          $('#featured_filter').val(query);
          $('#filter-modal').modal('hide');
        } else  {
          filterMarkers(data);
        }
      }
    })
  }
  function toTitleCase(str) {
    return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
  }

