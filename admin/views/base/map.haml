-# coding: utf-8
-content_for :include do
  :javascript
    img = new Image(330,30);
    img.src = 'https://file.ejatlas.org/static/ikon.png';
    var markerinfo = eval("["+#{@markerinfo}.join(',')+"]");
    var vectorinfo = [];
    var maptitle = "#{@maptitle}";
    var layers = "#{@baselayers}";
    var fid = 0;
  -if @vectors
    :javascript
      vectorinfo = #{@vectors};
  :javascript
    window.onload = onLoad;
    function onLoad() {
      if (typeof initMap === 'function' ) {
        updateInfo(1,"<h3>#{@maptitle}</h3><p>#{@markercount} cases reported</p>")
        mapFit();
      } else {
        setTimeout(onLoad,10);
      }
    }

.front
  -if @defs
    %svg{:style=>'height:0'}
      %defs
        -@defs.each do |d|
          %pattern{:id=>"#{d['filename']}",:patternUnits=>"userSpaceOnUse",:width=>"#{d['scale']}",:height=>"#{d['scale']}"}
            %image{"xlink:href"=>"https://file.ejatlas.org/patterns/#{d['filename']}.png",:x=>"0",:y=>"0",:width=>"#{d['scale']}",:height=>"#{d['scale']}"}

  %br/
  #infopane
    %h3=@maptitle
    %p="#{@markercount} cases reported"
  -#%br/
    %input#conf.autocomplete{:type=>'text','data-source'=>'markerinfo'}
    :javascript
      window.onload = function () {
        (function( $ ) {
          $.ui.autocomplete.prototype.options.autoSelect = true;
          $( "body" ).on( "blur", ".autocomplete", function( event ) {
            var autocomplete = $( this ).data()['uiAutocomplete'] || $( this ).data()['ui-autocomplete'];
            if ( !autocomplete.options.autoSelect || autocomplete.selectedItem ) { return; }
            var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" );
            autocomplete.widget().children( ".ui-menu-item" ).each(function() {
              var item = $( this )
              if ( matcher.test( item.name || item ) ) {
                autocomplete.selectedItem = item;
                return false;
              } else {
                $('.autocomplete').val('');
                return false
              }
            });
            if ( autocomplete.selectedItem ) {
              autocomplete._trigger( "select", event, { item: autocomplete.selectedItem } );
            }
          });

        }( jQuery ));
        $( ".autocomplete" ).autocomplete({
          minLength: 2,
          position: { my : "right top", at: "right bottom" },
          source: function( request, response ) {
            $source = eval($('.autocomplete:focus').attr('data-source'));
            var matcher = new RegExp( $.ui.autocomplete.escapeRegex( request.term ), "i" );
            response( $.grep( $source, function( value ) {
              value = value.name || value;
              return matcher.test( value );
            }) );
          },
          select: function( event, ui ) {
            console.log(ui)
            $item = $('.autocomplete:focus');
            $item.val( "" );
            $id = $item.attr('id');
            return false;
          }
        });
      }


  .horipane
    .title Legend
    .content{:style=>'display:none'}
      #legendpane
        .legend.noselect

  -if @browseinfo.keys.length > 1
    .horipane#filter-container
      .title Filter
      .content{:style=>'display:none;'}
        #filter-row.block{'data-width'=>600}
          #filter= @filter

    .horipane
      .title Browse maps
      .conten{:style=>'display:none;'}
        -@browseinfo.each do |k,v|
          .horipane.browse
            .title{:style=>'background:transparent'}= "by #{k.titlecase}"
            .content{:style=>'display:none;'}
              %div{:id=>"browse#{k}"}
                %ul.columns
                  -v.each do |c|
                    -j = JSON.parse c[0]
                    %li="<a href='/#{k}/#{j['slug']}'>#{j['name']}</a>&nbsp;&nbsp;<strong style='font-size:85%;'>#{c[1]}</strong>".html_safe

  -else
    -k = @browseinfo.keys.first
    .horipane.browse
      .title.active= "Browse by #{k}"
      .content
        %div{:id=>"browse#{k}"}
          %ul.columns
            -@browseinfo[k].each do |c|
              -j = JSON.parse c[0]
              %li="<a href='/#{k}/#{j['slug']}'>#{j['name']}</a>&nbsp;&nbsp;<strong style='font-size:85%;'>#{c[1]}</strong>".html_safe


  -if @feats
    .horipane
      .title.active Featured Maps
      .content
        %table
          %tbody.feats
            -@feats.each do |c|
              %tr.block{"data-width"=>360}
                %td.image
                  %a{:href=>"/featured/#{c.slug}"}
                    .img{:style=>(c.image ? "background:url('#{c.image}');" : "")}
                %td.exp
                  %h4
                    %a{:href=>"/featured/#{c.slug}"}= c.name
                  %p="#{c.description.split("\n")[0]}"

  -if @recent
    .horipane
      .title.active Recently Updated Conflicts
      .content
        %table
          %tbody.recent
            -@recent.each do |c|
              %tr.block{"data-width"=>360}
                %td.image
                  %a{:href=>"/conflict/#{c.slug}"}
                    .img{:style=>(c.images.any? ? "background:url('#{c.images.first.file.thumb.url}');" : "")}
                %td.exp
                  %h4
                    %a{:href=>"/conflict/#{c.slug}"}= c.name
                    -ago = ((Time.now-c.modified_at)/(60*60*24)).to_i
                    -if ago < 100
                      %small.blocked= "Updated #{ago < 1 ? "today" : (ago == 1 ? "#{ago} day ago" : "#{ago} days ago")}."
                  %p{:style=>'margin:0;padding:0;font-size:12px;line-height:16px;'}= c.headline

-content_for :body_end do
  :javascript
    function resetColumns() {
      columns = $('.browse .title.active').next('.content').find('.columns');
      if (columns.length > 0) {
        iColumns = String(Math.max(1,Math.floor(columns.width()/200)));
        $('.columns').css('column-count', iColumns);
        $('.columns').css('-moz-column-count', iColumns);
        $('.columns').css('-webkit-column-count', iColumns);
      }
    }


