-#coding:utf-8
.content
  %h2 Queued Jobs
  -if @jobs.any?
    %table.table
      %thead
        %tr
          %th Job Type
          %th Submitted at
          %th Status
          %th Arguments
      %tbody
        -@jobs.each do |j|
          -method_name = j.payload_object.method_name
          -arguments = j.payload_object.args
          %tr
            %td
              %strong= {:odsexport_without_delay=>'Export',:csvexport_without_delay=>'Export',:setcache_without_delay=>'Cache',:vectorupload_without_delay=>'Vector Processing',:parsedata_without_delay=>'CSV Parsing'}[method_name]
            %td= (j.created_at.utc+1.hours).strftime("%b %d, %H:%M CET")
            -if j.locked_at != nil
              %td= "Started at #{(j.locked_at.utc+1.hours).strftime('%H:%M')}"
            -elsif j.last_error != nil
              %td Failed
            -elsif j.locked_at.nil? and j.attempts == 0 
              %td Pending
            -else
              %td &nbsp;
            -if method_name == :setcache_without_delay
              -args = arguments[0].keys.map{|k|k.titlecase}.join(', ')
              %td
                %strong Update:
                =args
            -elsif [:csvexport_without_delay,:odsexport_without_delay].include?(method_name)
              -order = arguments[0].delete("order")
              -ascdsc = arguments[0].delete("ascdsc")
              -limit = arguments[0].delete("limit").to_i
              -args = arguments[0].keys.map{|k|k.titlecase}.join(', ')
              %td
                %strong Select:
                =args
                %strong Order:
                ={"id"=>"ID", "slug"=>"Name", "created_at"=>"Date of creation", "updated_at"=>"Date of modification", "start_datestamp"=>"Start date", "end_datestamp"=>"End date", "approval_status"=>"Approval status", "contributor"=>"Contributor", "status_id"=>"Intensity of conflict", "reaction_id"=>"Reactionary stage", "project_status_id"=>"Project status", "success_level"=>"Success level", "accuracy_level"=>"Accuracy of location", "project_area"=>"Project area", "investment_sum"=>"Level of investment", "affected_people"=>"Affected population"}[order]
                -if limit > 0
                  %strong Limit:
                  =limit
            -elsif method_name == :vectorupload_without_delay
              %td= arguments[1].name
            -else
              %td - none -
    :javascript
      setTimeout(function(){location.reload()}, 30000);
  -else
    %p There are no pending jobs at the moment.
      
-if @exports and @exports.any?
  .content
    %h3 Exports
    -ly = ""
    -lm = ""
    -changed = false
    -@exports.sort.reverse.each do |exp|
      -date = exp.match(/\d{4}-\d{2}/).to_s.split("-")
      -if ly != date[0]
        -ly = date[0]
        %br/
        %h4
          %b=ly
      -if lm != date[1]
        -lm = date[1]
        -changed = true
        %b.pull-left{:style=>"width:16px;"}=lm
      -else
        -changed = false
      %a{:href=>"/exports/#{exp}",:style=>"margin-left:#{changed ? 12 : 28}px;"}= exp
      %br/

