
-content_for :include do

  :css
    #canvasinfo {
      font-size: 16px;
      margin: 14px 132px;
    }
    #canvasinfo span {
      color: @red;
    }
    #graph {
      position: relative;
      height:240px;
    }
    #graph .top {
      height:40px;
    }
    #graph .top #select select {
      position: absolute;
      top:-3px;
      left:0px;
      width: 120px;
      background: #d9534f;
      color: #fff;
      padding: 5px 8px;
      font-size: 14px;
      border: none;
      -webkit-border-radius:4px;
      -moz-border-radius:4px;
      border-radius:4px
      height: 34px;
      outline:none;
      display: inline-block;
      -webkit-appearance:none;
      -moz-appearance:none;
      appearance:none;
      cursor:pointer;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
    }
    #graph .top #select select   &:hover {
      background: #0380a5;
    }
    #graph .top #select select   option {
      background: #0380a5;
      padding-top:4px;
      font-size: 14px;
    }
    #graph  svg {
      position: absolute;
      top:40px;
      min-height: 240px;
    }

-content_for :outer do
  #gc.modal.fade
    .modal-dialog
      .modal-content
        .modal-header
          %button.close{:type=>'button','data-dismiss'=>'modal','aria-hidden'=>true} &times;
          %p Please enter details for the Graphcommons network graph
        .modal-body
          %input.nname{:type=>"text",:placeholder=>"Name",:style=>"width:100%;"}
          %br/
          %br/
          %input.nsubtitle{:type=>"text",:placeholder=>"Subtitle",:style=>"width:100%;"}
          %br/
          %br/
          %textarea.ndesc{:rows=>2,:placeholder=>"Description",:style=>"width:100%;"}
          %br/
          %br/
          %button.btn.network{:onclick=>"serializeFilter('network')"} Send
.row
  .col-md-12
    %iframe.gc{:src => "", :frameborder => "0", :style => "display:none;overflow:hidden;border:1px solid #DDDDDD;width:1px;min-width:100%;height:100vh;min-height:400px;", :width => "100%", :height => "100%", :allowfullscreen=>true}
%br
%br
.row
  .col-md-12
    #graph.middle
      .top
        #select
          %select
            -$relatives.each do |k,v|
              %option{:value=>k}= v
        %p#canvasinfo
      .d3canvas &nbsp;
  %br/

.row{:style=>"background:white;"}
  %br/
  .col-sm-3
    %br/
    %ul{:style=>"padding:0;list-style-type:none;"}
      -$relatives.each do |k,v|
        %li
          %input.field{:type=>"checkbox",:value=>k,:checked=>(k=="companies" ? :checked : nil )}= v
    %hr/
    %p
      %span Retain any entities that is related to
      %input.limit{:type=>"number",:value=>2,:min=>1,:style=>"width:32px;display:inline;"}
      %span or more of the filtered conflicts.

  .col-sm-9
    #filter-row.block{'data-width'=>500}
      #filter= @filter

-content_for :body_end do
  =javascript_include_tag 'dist/d3.v3'
  :javascript
    $params = {x:"#{$relatives.keys.first}"}
    fill = "#0380a5"
    $("#graph select").on("change",function(e){
      updateGraph(false);
    })
    function updateGraph(data) {
      if (data) {
        $params["data"] = data
        xaxis = Object.keys(data)[0];
      } else {
        data = $params["data"];
        xaxis = $("#graph select option:selected").val();
      }
      if (xaxis == undefined && (!has_key($params,"x") || $params["x"] == undefined)) {
        xaxis = "companies";
      } else if (xaxis == undefined) {
        xaxis = $params["x"];
      }
      $("#graph select option").css("display", "none");
      $.each(data,function(i,e){
        $("#graph select option[value="+i+"]").css("display", "inline");
      })
      $("#graph select option[value="+xaxis+"]").prop("selected", true);
      $params["x"] = xaxis
      growGraph(data[xaxis])
      prevx = xaxis;
    }

    function growGraph(data) {
      var params = jQuery.extend(true, {}, $params);
      $('#graph .d3canvas').html('');
      cols = Object.keys(data).length
      datax = data;
      var sum = 0;
      for(var k in data) {
        sum += data[k];
      }
      var margin = {top: 60, right: 20, bottom: 0, left: 0},
      width = $('#graph').width() - margin.left - margin.right,
      height = $('#graph').height() - margin.top - margin.bottom;
      width = $('#graph').width();


      if ($params.x.match(/(perpetrator|cause|consequence)/)) {

        /*var vals = [];
        $.each(datax,function(i,e){
          if (e>0){ 
            vals.push(e);
          } else {
            delete data[i];
          }
        })
        var outerRadius = Math.min(width,height) / 2 + 12,
          innerRadius = outerRadius / 3;

        var pie = d3.layout.pie()
            .sort(null)
            .padAngle(.02);

        var arc = d3.svg.arc()
            .padRadius(outerRadius)
            .innerRadius(innerRadius);

        var svg = d3.select("#graph .d3canvas").append("svg")
            .attr("class", "data")
            .attr("width", width)
            .attr("height", height + 20)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + (height / 2 + 6) + ")");

        svg.selectAll("path.arc")
            .data(pie(vals))
            .enter().append("path")
            .attr("class", "arc")
            .each(function(d, i) { 
                d.outerRadius = outerRadius - 20; 
                d.key = Object.keys(data)[i]; 
                d.index = i;
                d.ratio = String(Math.round(d.value / sum * 1000) / 10).replace(".",",");
            })
            .attr("fill", fill)
            .attr("d", arc)
            .attr("id", function(d){return "path_"+d.index})
            .attr("transform", "scale(0,0)")
            .on("mouseover", function(d) {
              $("#canvasinfo").html(d.key+": <span>"+d.value+" <small>(%"+d.ratio+")</small></span>");
              arcTween(1.04, 0, d.index);
            })
            .on("mouseout", function(d) {
              $("#canvasinfo").html("");
              arcTween(1, 150, d.index);
            })
            .transition()
            .delay(function (d,i) { return i * (800 / cols);})
            .duration(400)
            .attr("transform", "scale(1,1)");

        function arcTween(r, d, i) {
          d3.select(".d3canvas #path_"+i)
            .transition()
            .delay(d)
            .duration(200)
            .attr("transform", "scale("+r+","+r+")")
            .attr("fill", d == 0 ? "#555" : fill);
        }*/

      } else {

        var max = d3.max(d3.entries(data), function(d) { return d.value; });

        var svg = d3.select(".d3canvas").append("svg")
            .attr("width", width )
            .attr("height", height + 20)
            .append("g")
            .attr("transform", "translate(" + margin.left /2 + ",20)");

        var x = d3.scale.ordinal()
            .rangeRoundBands([0, width],0);

        var y = d3.scale.linear()
            .range([height, 0]);

        x.domain(d3.keys(data));
        y.domain([0, max]);

        var g = svg.selectAll("g.g")
            .data(d3.entries(data))
            .enter().append("g")
            .attr("class", "g")
            .attr("id", function(d,i) {return "g_"+i})
            .each(function(d, i) { d.index = i})

        g.append("rect")
            .attr("class", "bar")
            .attr("x", function(d,i) { return i * x.rangeBand() + x.rangeBand() / 10; })
            .attr("width", x.rangeBand()*0.8)
            .attr("rx", 2)
            .attr("ry", 2)
            .attr("data-value", function(d) { return (d.value); })
            .attr("data-text", function(d) { return d.key + (d.key.substr(d.key.length - 1, 1) == "+" ? "" : ":") + " <span>" + d.value + " <small>(%"+String(Math.round(d.value / sum * 1000) / 10).replace(".",",")+")</small></span>"; })
            .style("fill", fill)
            .attr("height", 0)
            .attr("y", function(d) { return height; })
            .transition()
            .delay(function (d,i) { return i * (800 / cols);})
            .duration(400)
            .attr("height", function(d) { return (height * d.value / max); })
            .attr("y", function(d) { return height - (height * d.value / max); })

        /*g.append("text")
            .attr("x", function(d,i) { return (i+0.5) * x.rangeBand(); })
            .attr("y", function(d) { return (height * d.value / max) < 92 ? height - (height * d.value / max) - 12 : height - (height * d.value / max) + 36; })
            .style("fill", function(d) { return (height * d.value / max) < 92 ? "#555" : "#FFF"; })
            .style("text-anchor", "right")
            .append("tspan")
              .attr("rotate","90")
              .attr("font-size", 12)
              .style("font-weight", 500)
              .text(function(d) {return d.key} )
              .style("opacity", 0)
              .transition()
              .delay(function (d,i) { return i * (800 / cols);})
              .duration(1400)
              .style("opacity", 1);*/


        setTimeout(function() {g.on('mouseover', rectMover).on('mouseout', rectMout)}, 1200);
        

        function rectMover(e) {
          $("#canvasinfo").html($(this).find("rect").data("text"))
          d3.select("#g_"+e.index+" rect")
            .transition()
            .duration(100)
            .style("fill", "#d9534f");
        }
        function rectMout(e) {
          $("#canvasinfo").html("");
          d3.select("#g_"+e.index+" rect")
            .transition()
            .duration(100)
            .style("fill", fill);
        }
      }
    }

    function has_key(obj,key) {
      return Object.keys(obj).indexOf(key) >= 0;
    }

