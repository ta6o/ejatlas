.row
  .col-xs-12
    %h3
      Editing filter
      %b= @filter.name
      %small
        %a{:href=>'/filters'} all filters
.row
  .col-md-3.col-sm-4.col-xs-12
    %br/
    .group
      %label{:for=>"name"} Name
      %br/
      %input#name{:name=>:name,:type=>:text,:style=>"width:100%;",:value=>@filter.name}

    .group
      %label{:for=>"description"} Description
      %br/
      %textarea#description{:name=>:description,:rows=>5,:style=>"width:100%;"}= @filter.description

    .group
      %br/
      %input#public{:name=>:public,:type=>:checkbox,:checked=>@filter.public}
      %label{:for=>"public"} public?

    .group
      %button.btn.btn-info{:style=>"width:100%;",:onclick=>"saveFilter();"} SAVE

    .group
      %br/
      %span
        UID:
        %b= @filter.uid
      %br/
      %br/
      %span
        Results in
        %b#result= @filter.result_length || 0
        cases.
      %br/
      %pre#query{:style=>"font-family:sans-serif, sans; line-height:16px;"}


  .col-md-9.col-sm-8.col-xs-12
    %br/
    %br/
    %br/
    #filter-row.block{'data-width'=>350}
      #filter= render "base/filter", :layout => false

-content_for :body_end do
  :css
    #conflict_filter, #conflict_filter .body { height: unset}
  :javascript
    $(document).ready(function(){
      data = #{@filter.query.html_safe};
      hash = #{@filterhash.to_json.html_safe};
      $("pre#query").html(JSON.stringify(data, undefined, 2))
      dive(data,[],hash)
    })
    function filterFollowed(data){
      $("#result").text(data.length)
    }
    function saveFilter(){
      $.ajax({
        type: "POST",
        url: "/savefilter",
        data: {uid:"#{@filter.uid}",data:serializeFilter().query,name:$("#name").val(),description:$("#description").val(),"public":$("#public").prop("checked")},
        success: function(uid){
          window.location = "/editfilter/#{@filter.uid}"
        }
      })
    }

